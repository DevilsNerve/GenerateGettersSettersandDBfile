<?php
// Database connection details
$host = 'connectionhere';
$db = 'databasenamehere';
$user = 'auserhere';
$pass = 'apasswordhere';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES => false,
];

try {
    // Create PDO instance
    $pdo = new PDO($dsn, $user, $pass, $options);

    // Retrieve all table names from the database
    $stmt = $pdo->query("SHOW TABLES");
    $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);

    foreach ($tables as $tableName) {
        // Convert table name from snake_case to PascalCase for the class name
        $className = str_replace(' ', '', ucwords(str_replace('_', ' ', $tableName)));
        $dbClassName = $className . 'DB';

        // Generate the class file for the table
        generateClassFile($pdo, $tableName, $className, $db);

        // Generate the DB class file for the table
        generateDBClassFile($pdo, $tableName, $className, $dbClassName, $db);
    }

} catch (\PDOException $e) {
    throw new \PDOException($e->getMessage(), (int)$e->getCode());
}

function generateClassFile($pdo, $tableName, $className, $db) {
    // Prepare and execute query to get column details for each table
    $sql = "SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = :dbName AND TABLE_NAME = :tableName";
    $stmt = $pdo->prepare($sql);
    $stmt->execute(['dbName' => $db, 'tableName' => $tableName]);
    $columns = $stmt->fetchAll();

    // Start generating the class string
    $classStr = "<?php\n\n/**\n * Class generated by Austen Green for table '$tableName'\n */\nclass $className {\n";

    // Properties
    foreach ($columns as $column) {
        $classStr .= "    private \${$column['COLUMN_NAME']};\n";
    }

    // Constructor
    $classStr .= "\n    public function __construct(";
    $constructorParams = [];
    foreach ($columns as $column) {
        $constructorParams[] = "\${$column['COLUMN_NAME']}";
    }
    $classStr .= implode(', ', $constructorParams) . ") {\n";
    foreach ($columns as $column) {
        $classStr .= "        \$this->{$column['COLUMN_NAME']} = \${$column['COLUMN_NAME']};\n";
    }
    $classStr .= "    }\n";

    // Getters and Setters
    foreach ($columns as $column) {
        $camelCaseName = str_replace(' ', '', ucwords(str_replace('_', ' ', $column['COLUMN_NAME'])));
        // Getter
        $classStr .= "\n    public function get$camelCaseName() {\n";
        $classStr .= "        return \$this->{$column['COLUMN_NAME']};\n";
        $classStr .= "    }\n";
        // Setter
        $classStr .= "    public function set$camelCaseName(\${$column['COLUMN_NAME']}) {\n";
        $classStr .= "        \$this->{$column['COLUMN_NAME']} = \${$column['COLUMN_NAME']};\n";
        $classStr .= "    }\n";
    }

    $classStr .= "}\n";

    // Save the class to a PHP file
    $directory = __DIR__ . '/'.$db; // __DIR__ is the directory of the current script

    // Check if the directory exists, if not, create it
    if (!is_dir($directory)) {
        mkdir($directory, 0777, true); // true for recursive creation
    }

    // Now generate the file path
    $filePath = $directory . "/$className.php";

    // Save the class to a PHP file
    file_put_contents($filePath, $classStr);
}

function generateDBClassFile($pdo, $tableName, $className, $dbClassName, $db) {
    // This function generates the DB class file
    $dbClassStr = "<?php\n\n";
    $dbClassStr .= "require_once '$className.php';\n\n";
    $dbClassStr .= "class $dbClassName {\n";
    $dbClassStr .= "    // Add methods here\n";
    $dbClassStr .= "}\n";

    $directory = __DIR__ . '/'.$db;

    if (!is_dir($directory)) {
        mkdir($directory, 0777, true);
    }

    $filePath = $directory . "/$dbClassName.php";

    file_put_contents($filePath, $dbClassStr);
}
?>
